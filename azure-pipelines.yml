# Starter pipeline

trigger:
  branches:
    include:
      - main

pool:
  name: ec2-self-hosted

variables:
  dockerHubNamespace: 'msoliman427'
  dockerRegistryServiceConnection: 'dockerhub-service-conn'
  buildId: $(Build.BuildId)

parameters:
- name: environment
  type: string
  default: dev
  values:
    - dev
    - stagging
    - prod

stages:
- stage: CI
  displayName: CI stage
  jobs:
  - job: Lint
    displayName: Linting Backend
    steps:
    - checkout: self
    - script: |
        python3.9 -m venv .venv
        source .venv/bin/activate
        pip install flake8
        flake8 src/feedback_backend/app.py
      displayName: 'Run Linting'

  - job: Test
    dependsOn: Lint
    displayName: Testing Backend
    steps:
    - checkout: self
    - script: |
        python3.9 -m venv .venv
        source .venv/bin/activate
        export PYTHONPATH=$PYTHONPATH:$(Build.SourcesDirectory)/src
        pip install -r src/feedback_backend/requirements.txt
        pip install pytest
        pytest
      displayName: 'Run Unit Test'
      workingDirectory: $(Build.SourcesDirectory)

  - job: Build
    dependsOn: [Lint,Test]
    displayName: Build and Push
    steps:
    - checkout: self
    
    - task: Docker@2
      displayName: Build and Push Backend Image
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: $(dockerHubNamespace)/feedback-backend
        command: 'buildAndPush'
        Dockerfile: 'src/feedback_backend/Dockerfile'
        tags: $(Build.BuildId)
        buildContext: '$(Build.SourcesDirectory)/src/feedback_backend'

    - task: Docker@2
      displayName: Build and Push Frontend Image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(dockerHubNamespace)/feedback-frontend
        command: 'buildAndPush'
        Dockerfile: 'src/feedback_frontend/src/Dockerfile'
        tags: $(Build.BuildId)
        buildContext: '$(Build.SourcesDirectory)/src/feedback_frontend'
    
- stage: CD
  displayName: CD stage
  dependsOn: CI
  jobs:
  - deployment: DeployToK8S
    displayName: Deploy to K8S
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
            deploy:
                steps:
                - checkout: self
                - task: ReplaceTokens@5
                  inputs:
                    rootDirectory: '$(Build.SourcesDirectory)/k8s'
                    targetFiles: "**/*.yaml"
                    tokenPattern: custom
                    tokenPrefix: '${'
                    tokenSuffix: '}'
                    verbosity: detailed
                    escapeType: json

                - task: Bash@3
                  displayName: Apply Kubernetes Manifests
                  inputs:
                    targetType: 'inline'
                    script: |
                      kubectl apply -f $(Build.SourcesDirectory)/k8s

                - task: Bash@3
                  displayName: Show Kubernetes Resources
                  inputs:
                    targetType: 'inline'
                    script: |
                      kubectl get all
