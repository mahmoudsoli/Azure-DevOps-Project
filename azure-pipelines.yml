trigger:
  branches:
    include:
      - main
      - feat/setup

pool:
  name: ec2-self-hosted

parameters:
- name: environment
  type: string
  default: dev
  values:
    - dev
    - stagging
    - prod

variables:
  dockerHubNamespace: 'msoliman427'
  dockerRegistryServiceConnection: 'dockerhub-service-conn'
  buildId: $(Build.BuildId)

stages:
- stage: CI
  displayName: CI stage
  jobs:
  - job: ScanRepoSecrets
    displayName: 'Scan Repo for Secrets with Gitleaks'
    pool:
      name: ec2-self-hosted   
    steps:
    - checkout: self
    - script: |
        echo "🔍 Installing Gitleaks..."
        curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/v8.0.0/gitleaks-linux-amd64" \
          -o $(Build.SourcesDirectory)/tools/gitleaks
        chmod +x $(Build.SourcesDirectory)/tools/gitleaks
        export PATH=$PATH:$(Build.SourcesDirectory)/tools
      displayName: 'Install Gitleaks'


    - script: |
        echo "🔍 Running Gitleaks scan..."
        gitleaks detect --repo=$(Build.SourcesDirectory) --report-format=sarif --report-path=$(Build.ArtifactStagingDirectory)/gitleaks-report.sarif
      displayName: 'Run Gitleaks Detect'

    - publish: $(Build.ArtifactStagingDirectory)/gitleaks-report.sarif
      artifact: gitleaks-report
      displayName: 'Publish Gitleaks Report'

  - job: Lint
    displayName: Linting Backend
    steps:
    - checkout: self
    - script: |
        python3.9 -m venv .venv
        source .venv/bin/activate
        pip install flake8
        flake8 src/feedback_backend/app.py
      displayName: 'Run Linting'

  - job: Test
    dependsOn: Lint
    displayName: Testing Backend
    steps:
    - checkout: self
    - script: |
        python3.9 -m venv .venv
        source .venv/bin/activate
        export PYTHONPATH=$PYTHONPATH:$(Build.SourcesDirectory)/src
        pip install -r src/feedback_backend/requirements.txt
        pip install pytest
        pytest
      displayName: 'Run Unit Test'
      workingDirectory: $(Build.SourcesDirectory)

  - job: BuildFeedBackBackEndImage
    dependsOn: [Lint, Test]
    displayName: 'Build feedback_backend Image'
    steps:
    - checkout: self
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: $(dockerHubNamespace)/feedback-backend
        command: 'build'
        Dockerfile: 'src/feedback_backend/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/src/feedback_backend'
        tags: $(Build.BuildId)

  - job: ScanFeedBackBackEndImage
    dependsOn: [BuildFeedBackBackEndImage]
    displayName: 'Scan Backend Image with Trivy'
    steps:
    - checkout: self
    - script: |
        if ! command -v trivy &> /dev/null
        then
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        fi

        export PATH=$PATH:$(pwd)/bin

        echo "Scanning the image..."
        trivy image --exit-code 0 --severity HIGH,CRITICAL --no-progress $(dockerHubNamespace)/feedback-backend:$(Build.BuildId)


  - job: PushFeedBackBackEndImage
    dependsOn: [ScanFeedBackBackEndImage]
    displayName: 'Push feedback_backend Image'
    steps:
    - checkout: self
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: $(dockerHubNamespace)/feedback-backend
        command: 'push'
        tags: $(Build.BuildId)
#    - task: Docker@2
#      displayName: Build and Push Backend Image
#      inputs:
#        containerRegistry: '$(dockerRegistryServiceConnection)'
#        repository: $(dockerHubNamespace)/feedback-backend
#        command: 'buildAndPush'
#        Dockerfile: 'src/feedback_backend/Dockerfile'
#        tags: $(Build.BuildId)
#        buildContext: '$(Build.SourcesDirectory)/src/feedback_backend'
  - job: BuildFeedBackFrontImage
    dependsOn: [Lint, Test]
    displayName: 'Build feedback_front Image'
    steps:
    - checkout: self
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: $(dockerHubNamespace)/feedback-frontend
        command: 'build'
        Dockerfile: 'src/feedback_frontend/src/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/src/feedback_frontend'
        tags: $(Build.BuildId)

  - job: ScanFeedBackFrontImage
    dependsOn: [BuildFeedBackFrontImage]
    displayName: 'Scan frontend Image with Trivy'
    steps:
    - checkout: self
    - script: |
        if ! command -v trivy &> /dev/null
        then
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        fi

        export PATH=$PATH:$(pwd)/bin

        echo "Scanning the image..."
        trivy image --exit-code 0 --severity HIGH,CRITICAL --no-progress $(dockerHubNamespace)/feedback-frontend:$(Build.BuildId)

  - job: PushFeedBackFrontImage
    dependsOn: [ScanFeedBackFrontImage]
    displayName: 'Push feedback_frontend Image'
    steps:
    - checkout: self
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: $(dockerHubNamespace)/feedback-frontend
        command: 'push'
        tags: $(Build.BuildId)
#    - task: Docker@2
#      displayName: Build and Push Frontend Image
#      inputs:
#        containerRegistry: $(dockerRegistryServiceConnection)
#        repository: $(dockerHubNamespace)/feedback-frontend
#        command: 'buildAndPush'
#        Dockerfile: 'src/feedback_frontend/src/Dockerfile'
#        tags: $(Build.BuildId)
#        buildContext: '$(Build.SourcesDirectory)/src/feedback_frontend'

- stage: CD
  displayName: CD stage
  dependsOn: CI
  jobs:
  - deployment: DeployToEKS
    displayName: Deploy to EKS
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
            deploy:
                steps:
                - checkout: self
                - task: ReplaceTokens@5
                  inputs:
                    rootDirectory: '$(Build.SourcesDirectory)/k8s'
                    targetFiles: "**/*.yaml"
                    tokenPattern: custom
                    tokenPrefix: '${'
                    tokenSuffix: '}'
                    verbosity: detailed
                    escapeType: json

                - task: AWSShellScript@1
                  displayName: 'Login to EKS Cluster'
                  inputs:
                    awsCredentials: 'aws-eks-service-connection'   
                    regionName: 'us-east-1'
                    scriptType: 'inline'
                    inlineScript: |
                      echo "Logging in to EKS cluster"
                      aws eks update-kubeconfig \
                        --region us-east-1 \
                        --name eks-stagging-cluster

                - script: |
                    kubectl apply -f $(Build.SourcesDirectory)/k8s/ -n ${{ parameters.environment }}
                  displayName: 'Deploy to EKS with kubectl'